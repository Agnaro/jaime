{"version":3,"sources":["components/StockPrice.js","components/Jaime.js","components/Loss.js","App.js","serviceWorker.js","index.js"],"names":["StockPrice","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","number_format_default","props","price","displayType","prefix","decimalScale","fixedDecimalScale","Component","protoTypes","PropTypes","number","isRequired","getPrice","func","Jaime","Loss","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","getStyle","color","currentPrice","getTotal","soldPrice","soldAmt","style","App","state","stockPrice","jaimeAmt","jaimePrice","_this2","axios","get","then","res","setState","data","components_StockPrice","components_Jaime","amt","colSpan","components_Loss","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dd863de.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport class StockPrice extends Component {\r\n  render() {\r\n    return (\r\n      <div className='fordBox'>\r\n            Current Ford stock price: <br/>\r\n            <div className='stockPrice'>\r\n                <NumberFormat value={this.props.price} displayType={'text'} prefix={'$'} decimalScale={2} fixedDecimalScale={true} ></NumberFormat>\r\n            </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nStockPrice.protoTypes = {\r\n    price: PropTypes.number.isRequired,\r\n    getPrice: PropTypes.func.isRequired\r\n}\r\n\r\nexport default StockPrice\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport class Jaime extends Component {\r\n  render() {\r\n    return (\r\n      <div className='fordBox'>\r\n        Jaime sold his stocks at:\r\n        <div className='soldPrice'>\r\n            <NumberFormat value={this.props.price} displayType={'text'} prefix={'$'} decimalScale={2} fixedDecimalScale={true} ></NumberFormat>    \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nJaime.protoTypes = {\r\n    price: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Jaime\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport class Loss extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            color: this.props.currentPrice > 0 ? 'red': 'green'\r\n        }\r\n    }\r\n\r\n    getTotal = () => {\r\n        return (this.props.currentPrice - this.props.soldPrice)*this.props.soldAmt;\r\n    }\r\n    \r\n  render() {\r\n    return (\r\n      <div className='lossBox'>\r\n        Jaime's lost profits:\r\n        <div className='lossAmt' style={this.getStyle()}>\r\n            <NumberFormat value={this.getTotal()} displayType={'text'} prefix={'$'} decimalScale={2} fixedDecimalScale={true} ></NumberFormat>    \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nLoss.propTypes = {\r\n    currentPrice: PropTypes.number.isRequired,\r\n    soldPrice: PropTypes.number.isRequired,\r\n    soldAmt: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Loss\r\n","import React, { Component } from 'react';\nimport StockPrice from './components/StockPrice';\nimport Jaime from './components/Jaime';\nimport Loss from './components/Loss';\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n      stockPrice: 1,\n      jaimeAmt: 10,\n      jaimePrice: 7.65\n  }\n\n  componentDidMount() {\n    axios.get('https://api.iextrading.com/1.0/stock/f/price').then(res => this.setState({ stockPrice: res.data }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table>\n          <tr>\n            <td>\n              <StockPrice price={this.state.stockPrice}  />\n            </td>\n            <td>\n              <Jaime price={this.state.jaimePrice} amt={this.state.jaimeAmt} />\n            </td>\n          </tr>\n          <tr>\n            <td colSpan='2'>\n              <Loss currentPrice={this.state.stockPrice} soldPrice={this.state.jaimePrice} soldAmt={this.state.jaimeAmt} />\n            </td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}